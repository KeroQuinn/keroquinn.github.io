<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>map</title>
    <link href="/2021/08/02/map/"/>
    <url>/2021/08/02/map/</url>
    
    <content type="html"><![CDATA[<p>#STL应用之map</p><p>##Map是啥？</p><p>Map就是从键（key）到值（value）的映射。因为重载了[]运算符，map像是数组的“高级版”。[1]</p><p>Map是STL的一个关联容器，它提供一对一（其中第一个可以称为关键字，每个关键字只能在map中出现一次，第二个可能称为该关键字的值）的数据 处理能力，由于这个特性，它完成有可能在我们处理一对一数据的时候，在编程上提供快速通道。这里说下map内部数据的组织，map内部自建一颗红黑树(一 种非严格意义上的平衡二叉树)，这颗树具有对数据自动排序的功能，所以在map内部所有的数据都是有序的。</p><p>所以可以说map的底层是tree。<br>map的key不可以重复，但value可以。而在multimap中key是可以重复的。</p><p>Map的应用</p><p>开始当然需要#include <map>啦<br>在赋值之前，我们需要map&lt;string, int&gt; dict;<br>int声明整型变量，string声明字符串，相信傻瓜都知道<br>这两者取决你赋值的数据类型和谁对应key和value<br>之后插入数据有多种方法<br>•我最喜欢用的婴儿方法<br>dict[“key”]=value<br>•杜老师教的需要打多一点字的方法<br>dict.insert(map&lt;string, int&gt;::value_type(“key”, value))<br>•CSDN上看的用数组插入的方法<br>map&lt;int, string&gt; mapStudent; mapStudent[1] = “student_one”;<br>•我忘了<br>插入数据后，能干点什么？</p><p>在？看看map<br>bool empty()查询map是否为空<br>size_t size()查询map中键值对的数量<br>count()<br>可以这样用：当你需要知道一个key的value，却不知道这个key是否存在时，可以用count返回元素出现的次数，再根据有无继续操作<br>（其实find好像也可以这样用哒！返回1或0）<br>（反正我学了这个函数就要写进blog里！）<br>枚举整个map容器<br>for (map&lt;string, int&gt;::iterator it = dict.begin(); it != dict.end(); ++it)<br>•查找，删除，交换等…<br>课里没用上…<br>样例代码</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20</p><p> #include <map><br>#include <string><br>using namespace std;<br>int main()<br>{<br>  map&lt;string, int&gt; dict;<br>  dict[“王大狗”]=1;<br>  dict[“王二狗”] = 2;<br>  dict.insert(map&lt;string, int&gt;::value_type(“李狗蛋”, 1));<br>  if (dict.count(“王大狗”)) {<br>      cout &lt;&lt; “王大狗在” &lt;&lt; dict[“王大狗”] &lt;&lt; “村” &lt;&lt; endl;<br>  }<br>  else<br>      cout &lt;&lt; “他进城打工了！” &lt;&lt; endl;<br>  cout &lt;&lt; “开始大狗枚举” &lt;&lt; endl;<br>  for (map&lt;string, int&gt;::iterator it = dict.begin(); it != dict.end(); ++it)<br>      cout &lt;&lt; it-&gt;first &lt;&lt; “在” &lt;&lt; it-&gt;second &lt;&lt; “班” &lt;&lt; endl;<br>  dict.clear();<br>  return 0;<br>}</p><p>应该不用注释也能看懂~<br>习题<br>正在写，写完update，咕咕咕</p>]]></content>
    
    
    
    <tags>
      
      <tag>今天学了啥</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>works</title>
    <link href="/2019/08/06/works/"/>
    <url>/2019/08/06/works/</url>
    
    <content type="html"><![CDATA[<h1 id="这是我基于Hexo的第一篇博文。"><a href="#这是我基于Hexo的第一篇博文。" class="headerlink" title="这是我基于Hexo的第一篇博文。"></a>这是我基于Hexo的第一篇博文。</h1><p><em>也是我在自己的网站上写的第一个东西~</em></p><p><em>希望不会荒废吧~</em><br>网站托管到GitHub上面 不需要任何费用<br>这个破网站居然能运行了，amazing</p><p>也是我纯手工搭建的~！<br>相比之前用过的Wordpress和Godaddy提供的建站大师，Hexo相对轻量化，并且更容易自定义。</p><p>因为Wordpress和建站大师实在是太臃肿太傻瓜了<br><del>不能体现我一流的乱搞水平</del></p><p>建站过程中，因为不熟悉Git和Nodejs，还是踩了很多坑<br>所幸都解决啦！<br>搞好了Git，以后代码push到自己的GitHub仓库里也会非常的简单</p><p>话说我差点就学用FTP了呢…幸好早点下定决心搞Hexo！</p><p>我的破网站目前也开源了（废话）</p><p>麻烦给个Star吧~<br>虽然没什么好给的  </p><p>以后写点什么好呢~</p>]]></content>
    
    
    
    <tags>
      
      <tag>develop</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
